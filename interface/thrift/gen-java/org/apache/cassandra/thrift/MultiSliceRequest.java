/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.cassandra.thrift;
/*
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 */


@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * Used to perform multiple slices on a single row key in one rpc operation
 * @param key. The row key to be multi sliced
 * @param column_parent. The column family (super columns are unsupported)
 * @param column_slices. 0 to many ColumnSlice objects each will be used to select columns
 * @param reversed. Direction of slice
 * @param count. Maximum number of columns
 * @param consistency_level. Level to perform the operation at
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.0)", date = "2023-11-08")
public class MultiSliceRequest implements org.apache.thrift.TBase<MultiSliceRequest, MultiSliceRequest._Fields>, java.io.Serializable, Cloneable, Comparable<MultiSliceRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MultiSliceRequest");

  private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COLUMN_PARENT_FIELD_DESC = new org.apache.thrift.protocol.TField("column_parent", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField COLUMN_SLICES_FIELD_DESC = new org.apache.thrift.protocol.TField("column_slices", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField REVERSED_FIELD_DESC = new org.apache.thrift.protocol.TField("reversed", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CONSISTENCY_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("consistency_level", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MultiSliceRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MultiSliceRequestTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer key; // optional
  public @org.apache.thrift.annotation.Nullable ColumnParent column_parent; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<ColumnSlice> column_slices; // optional
  public boolean reversed; // optional
  public int count; // optional
  /**
   * 
   * @see ConsistencyLevel
   */
  public @org.apache.thrift.annotation.Nullable ConsistencyLevel consistency_level; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    KEY((short)1, "key"),
    COLUMN_PARENT((short)2, "column_parent"),
    COLUMN_SLICES((short)3, "column_slices"),
    REVERSED((short)4, "reversed"),
    COUNT((short)5, "count"),
    /**
     * 
     * @see ConsistencyLevel
     */
    CONSISTENCY_LEVEL((short)6, "consistency_level");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // KEY
          return KEY;
        case 2: // COLUMN_PARENT
          return COLUMN_PARENT;
        case 3: // COLUMN_SLICES
          return COLUMN_SLICES;
        case 4: // REVERSED
          return REVERSED;
        case 5: // COUNT
          return COUNT;
        case 6: // CONSISTENCY_LEVEL
          return CONSISTENCY_LEVEL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REVERSED_ISSET_ID = 0;
  private static final int __COUNT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.KEY,_Fields.COLUMN_PARENT,_Fields.COLUMN_SLICES,_Fields.REVERSED,_Fields.COUNT,_Fields.CONSISTENCY_LEVEL};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.COLUMN_PARENT, new org.apache.thrift.meta_data.FieldMetaData("column_parent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ColumnParent.class)));
    tmpMap.put(_Fields.COLUMN_SLICES, new org.apache.thrift.meta_data.FieldMetaData("column_slices", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ColumnSlice.class))));
    tmpMap.put(_Fields.REVERSED, new org.apache.thrift.meta_data.FieldMetaData("reversed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONSISTENCY_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("consistency_level", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ConsistencyLevel.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MultiSliceRequest.class, metaDataMap);
  }

  public MultiSliceRequest() {
    this.reversed = false;

    this.count = 1000;

    this.consistency_level = org.apache.cassandra.thrift.ConsistencyLevel.ONE;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MultiSliceRequest(MultiSliceRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetKey()) {
      this.key = org.apache.thrift.TBaseHelper.copyBinary(other.key);
    }
    if (other.isSetColumn_parent()) {
      this.column_parent = new ColumnParent(other.column_parent);
    }
    if (other.isSetColumn_slices()) {
      java.util.List<ColumnSlice> __this__column_slices = new java.util.ArrayList<ColumnSlice>(other.column_slices.size());
      for (ColumnSlice other_element : other.column_slices) {
        __this__column_slices.add(new ColumnSlice(other_element));
      }
      this.column_slices = __this__column_slices;
    }
    this.reversed = other.reversed;
    this.count = other.count;
    if (other.isSetConsistency_level()) {
      this.consistency_level = other.consistency_level;
    }
  }

  public MultiSliceRequest deepCopy() {
    return new MultiSliceRequest(this);
  }

  @Override
  public void clear() {
    this.key = null;
    this.column_parent = null;
    this.column_slices = null;
    this.reversed = false;

    this.count = 1000;

    this.consistency_level = org.apache.cassandra.thrift.ConsistencyLevel.ONE;

  }

  public byte[] getKey() {
    setKey(org.apache.thrift.TBaseHelper.rightSize(key));
    return key == null ? null : key.array();
  }

  public java.nio.ByteBuffer bufferForKey() {
    return org.apache.thrift.TBaseHelper.copyBinary(key);
  }

  public MultiSliceRequest setKey(byte[] key) {
    this.key = key == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(key.clone());
    return this;
  }

  public MultiSliceRequest setKey(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer key) {
    this.key = org.apache.thrift.TBaseHelper.copyBinary(key);
    return this;
  }

  public void unsetKey() {
    this.key = null;
  }

  /** Returns true if field key is set (has been assigned a value) and false otherwise */
  public boolean isSetKey() {
    return this.key != null;
  }

  public void setKeyIsSet(boolean value) {
    if (!value) {
      this.key = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ColumnParent getColumn_parent() {
    return this.column_parent;
  }

  public MultiSliceRequest setColumn_parent(@org.apache.thrift.annotation.Nullable ColumnParent column_parent) {
    this.column_parent = column_parent;
    return this;
  }

  public void unsetColumn_parent() {
    this.column_parent = null;
  }

  /** Returns true if field column_parent is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_parent() {
    return this.column_parent != null;
  }

  public void setColumn_parentIsSet(boolean value) {
    if (!value) {
      this.column_parent = null;
    }
  }

  public int getColumn_slicesSize() {
    return (this.column_slices == null) ? 0 : this.column_slices.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<ColumnSlice> getColumn_slicesIterator() {
    return (this.column_slices == null) ? null : this.column_slices.iterator();
  }

  public void addToColumn_slices(ColumnSlice elem) {
    if (this.column_slices == null) {
      this.column_slices = new java.util.ArrayList<ColumnSlice>();
    }
    this.column_slices.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<ColumnSlice> getColumn_slices() {
    return this.column_slices;
  }

  public MultiSliceRequest setColumn_slices(@org.apache.thrift.annotation.Nullable java.util.List<ColumnSlice> column_slices) {
    this.column_slices = column_slices;
    return this;
  }

  public void unsetColumn_slices() {
    this.column_slices = null;
  }

  /** Returns true if field column_slices is set (has been assigned a value) and false otherwise */
  public boolean isSetColumn_slices() {
    return this.column_slices != null;
  }

  public void setColumn_slicesIsSet(boolean value) {
    if (!value) {
      this.column_slices = null;
    }
  }

  public boolean isReversed() {
    return this.reversed;
  }

  public MultiSliceRequest setReversed(boolean reversed) {
    this.reversed = reversed;
    setReversedIsSet(true);
    return this;
  }

  public void unsetReversed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REVERSED_ISSET_ID);
  }

  /** Returns true if field reversed is set (has been assigned a value) and false otherwise */
  public boolean isSetReversed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REVERSED_ISSET_ID);
  }

  public void setReversedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REVERSED_ISSET_ID, value);
  }

  public int getCount() {
    return this.count;
  }

  public MultiSliceRequest setCount(int count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  /**
   * 
   * @see ConsistencyLevel
   */
  @org.apache.thrift.annotation.Nullable
  public ConsistencyLevel getConsistency_level() {
    return this.consistency_level;
  }

  /**
   * 
   * @see ConsistencyLevel
   */
  public MultiSliceRequest setConsistency_level(@org.apache.thrift.annotation.Nullable ConsistencyLevel consistency_level) {
    this.consistency_level = consistency_level;
    return this;
  }

  public void unsetConsistency_level() {
    this.consistency_level = null;
  }

  /** Returns true if field consistency_level is set (has been assigned a value) and false otherwise */
  public boolean isSetConsistency_level() {
    return this.consistency_level != null;
  }

  public void setConsistency_levelIsSet(boolean value) {
    if (!value) {
      this.consistency_level = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case KEY:
      if (value == null) {
        unsetKey();
      } else {
        if (value instanceof byte[]) {
          setKey((byte[])value);
        } else {
          setKey((java.nio.ByteBuffer)value);
        }
      }
      break;

    case COLUMN_PARENT:
      if (value == null) {
        unsetColumn_parent();
      } else {
        setColumn_parent((ColumnParent)value);
      }
      break;

    case COLUMN_SLICES:
      if (value == null) {
        unsetColumn_slices();
      } else {
        setColumn_slices((java.util.List<ColumnSlice>)value);
      }
      break;

    case REVERSED:
      if (value == null) {
        unsetReversed();
      } else {
        setReversed((java.lang.Boolean)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((java.lang.Integer)value);
      }
      break;

    case CONSISTENCY_LEVEL:
      if (value == null) {
        unsetConsistency_level();
      } else {
        setConsistency_level((ConsistencyLevel)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case KEY:
      return getKey();

    case COLUMN_PARENT:
      return getColumn_parent();

    case COLUMN_SLICES:
      return getColumn_slices();

    case REVERSED:
      return isReversed();

    case COUNT:
      return getCount();

    case CONSISTENCY_LEVEL:
      return getConsistency_level();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case KEY:
      return isSetKey();
    case COLUMN_PARENT:
      return isSetColumn_parent();
    case COLUMN_SLICES:
      return isSetColumn_slices();
    case REVERSED:
      return isSetReversed();
    case COUNT:
      return isSetCount();
    case CONSISTENCY_LEVEL:
      return isSetConsistency_level();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof MultiSliceRequest)
      return this.equals((MultiSliceRequest)that);
    return false;
  }

  public boolean equals(MultiSliceRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_key = true && this.isSetKey();
    boolean that_present_key = true && that.isSetKey();
    if (this_present_key || that_present_key) {
      if (!(this_present_key && that_present_key))
        return false;
      if (!this.key.equals(that.key))
        return false;
    }

    boolean this_present_column_parent = true && this.isSetColumn_parent();
    boolean that_present_column_parent = true && that.isSetColumn_parent();
    if (this_present_column_parent || that_present_column_parent) {
      if (!(this_present_column_parent && that_present_column_parent))
        return false;
      if (!this.column_parent.equals(that.column_parent))
        return false;
    }

    boolean this_present_column_slices = true && this.isSetColumn_slices();
    boolean that_present_column_slices = true && that.isSetColumn_slices();
    if (this_present_column_slices || that_present_column_slices) {
      if (!(this_present_column_slices && that_present_column_slices))
        return false;
      if (!this.column_slices.equals(that.column_slices))
        return false;
    }

    boolean this_present_reversed = true && this.isSetReversed();
    boolean that_present_reversed = true && that.isSetReversed();
    if (this_present_reversed || that_present_reversed) {
      if (!(this_present_reversed && that_present_reversed))
        return false;
      if (this.reversed != that.reversed)
        return false;
    }

    boolean this_present_count = true && this.isSetCount();
    boolean that_present_count = true && that.isSetCount();
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_consistency_level = true && this.isSetConsistency_level();
    boolean that_present_consistency_level = true && that.isSetConsistency_level();
    if (this_present_consistency_level || that_present_consistency_level) {
      if (!(this_present_consistency_level && that_present_consistency_level))
        return false;
      if (!this.consistency_level.equals(that.consistency_level))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetKey()) ? 131071 : 524287);
    if (isSetKey())
      hashCode = hashCode * 8191 + key.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumn_parent()) ? 131071 : 524287);
    if (isSetColumn_parent())
      hashCode = hashCode * 8191 + column_parent.hashCode();

    hashCode = hashCode * 8191 + ((isSetColumn_slices()) ? 131071 : 524287);
    if (isSetColumn_slices())
      hashCode = hashCode * 8191 + column_slices.hashCode();

    hashCode = hashCode * 8191 + ((isSetReversed()) ? 131071 : 524287);
    if (isSetReversed())
      hashCode = hashCode * 8191 + ((reversed) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCount()) ? 131071 : 524287);
    if (isSetCount())
      hashCode = hashCode * 8191 + count;

    hashCode = hashCode * 8191 + ((isSetConsistency_level()) ? 131071 : 524287);
    if (isSetConsistency_level())
      hashCode = hashCode * 8191 + consistency_level.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(MultiSliceRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetKey(), other.isSetKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumn_parent(), other.isSetColumn_parent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_parent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_parent, other.column_parent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetColumn_slices(), other.isSetColumn_slices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumn_slices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_slices, other.column_slices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReversed(), other.isSetReversed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReversed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reversed, other.reversed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCount(), other.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetConsistency_level(), other.isSetConsistency_level());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsistency_level()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consistency_level, other.consistency_level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MultiSliceRequest(");
    boolean first = true;

    if (isSetKey()) {
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.key, sb);
      }
      first = false;
    }
    if (isSetColumn_parent()) {
      if (!first) sb.append(", ");
      sb.append("column_parent:");
      if (this.column_parent == null) {
        sb.append("null");
      } else {
        sb.append(this.column_parent);
      }
      first = false;
    }
    if (isSetColumn_slices()) {
      if (!first) sb.append(", ");
      sb.append("column_slices:");
      if (this.column_slices == null) {
        sb.append("null");
      } else {
        sb.append(this.column_slices);
      }
      first = false;
    }
    if (isSetReversed()) {
      if (!first) sb.append(", ");
      sb.append("reversed:");
      sb.append(this.reversed);
      first = false;
    }
    if (isSetCount()) {
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
    }
    if (isSetConsistency_level()) {
      if (!first) sb.append(", ");
      sb.append("consistency_level:");
      if (this.consistency_level == null) {
        sb.append("null");
      } else {
        sb.append(this.consistency_level);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (column_parent != null) {
      column_parent.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MultiSliceRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MultiSliceRequestStandardScheme getScheme() {
      return new MultiSliceRequestStandardScheme();
    }
  }

  private static class MultiSliceRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<MultiSliceRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MultiSliceRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.key = iprot.readBinary();
              struct.setKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COLUMN_PARENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.column_parent = new ColumnParent();
              struct.column_parent.read(iprot);
              struct.setColumn_parentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COLUMN_SLICES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list216 = iprot.readListBegin();
                struct.column_slices = new java.util.ArrayList<ColumnSlice>(_list216.size);
                @org.apache.thrift.annotation.Nullable ColumnSlice _elem217;
                for (int _i218 = 0; _i218 < _list216.size; ++_i218)
                {
                  _elem217 = new ColumnSlice();
                  _elem217.read(iprot);
                  struct.column_slices.add(_elem217);
                }
                iprot.readListEnd();
              }
              struct.setColumn_slicesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REVERSED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.reversed = iprot.readBool();
              struct.setReversedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.count = iprot.readI32();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONSISTENCY_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.consistency_level = org.apache.cassandra.thrift.ConsistencyLevel.findByValue(iprot.readI32());
              struct.setConsistency_levelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MultiSliceRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.key != null) {
        if (struct.isSetKey()) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeBinary(struct.key);
          oprot.writeFieldEnd();
        }
      }
      if (struct.column_parent != null) {
        if (struct.isSetColumn_parent()) {
          oprot.writeFieldBegin(COLUMN_PARENT_FIELD_DESC);
          struct.column_parent.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.column_slices != null) {
        if (struct.isSetColumn_slices()) {
          oprot.writeFieldBegin(COLUMN_SLICES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.column_slices.size()));
            for (ColumnSlice _iter219 : struct.column_slices)
            {
              _iter219.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetReversed()) {
        oprot.writeFieldBegin(REVERSED_FIELD_DESC);
        oprot.writeBool(struct.reversed);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCount()) {
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
      }
      if (struct.consistency_level != null) {
        if (struct.isSetConsistency_level()) {
          oprot.writeFieldBegin(CONSISTENCY_LEVEL_FIELD_DESC);
          oprot.writeI32(struct.consistency_level.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MultiSliceRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MultiSliceRequestTupleScheme getScheme() {
      return new MultiSliceRequestTupleScheme();
    }
  }

  private static class MultiSliceRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<MultiSliceRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MultiSliceRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetKey()) {
        optionals.set(0);
      }
      if (struct.isSetColumn_parent()) {
        optionals.set(1);
      }
      if (struct.isSetColumn_slices()) {
        optionals.set(2);
      }
      if (struct.isSetReversed()) {
        optionals.set(3);
      }
      if (struct.isSetCount()) {
        optionals.set(4);
      }
      if (struct.isSetConsistency_level()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetKey()) {
        oprot.writeBinary(struct.key);
      }
      if (struct.isSetColumn_parent()) {
        struct.column_parent.write(oprot);
      }
      if (struct.isSetColumn_slices()) {
        {
          oprot.writeI32(struct.column_slices.size());
          for (ColumnSlice _iter220 : struct.column_slices)
          {
            _iter220.write(oprot);
          }
        }
      }
      if (struct.isSetReversed()) {
        oprot.writeBool(struct.reversed);
      }
      if (struct.isSetCount()) {
        oprot.writeI32(struct.count);
      }
      if (struct.isSetConsistency_level()) {
        oprot.writeI32(struct.consistency_level.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MultiSliceRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.key = iprot.readBinary();
        struct.setKeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.column_parent = new ColumnParent();
        struct.column_parent.read(iprot);
        struct.setColumn_parentIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list221 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.column_slices = new java.util.ArrayList<ColumnSlice>(_list221.size);
          @org.apache.thrift.annotation.Nullable ColumnSlice _elem222;
          for (int _i223 = 0; _i223 < _list221.size; ++_i223)
          {
            _elem222 = new ColumnSlice();
            _elem222.read(iprot);
            struct.column_slices.add(_elem222);
          }
        }
        struct.setColumn_slicesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.reversed = iprot.readBool();
        struct.setReversedIsSet(true);
      }
      if (incoming.get(4)) {
        struct.count = iprot.readI32();
        struct.setCountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.consistency_level = org.apache.cassandra.thrift.ConsistencyLevel.findByValue(iprot.readI32());
        struct.setConsistency_levelIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

