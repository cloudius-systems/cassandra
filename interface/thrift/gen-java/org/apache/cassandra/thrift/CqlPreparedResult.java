/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.cassandra.thrift;
/*
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 * 
 */


@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.0)", date = "2023-11-08")
public class CqlPreparedResult implements org.apache.thrift.TBase<CqlPreparedResult, CqlPreparedResult._Fields>, java.io.Serializable, Cloneable, Comparable<CqlPreparedResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CqlPreparedResult");

  private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField VARIABLE_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("variable_types", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField VARIABLE_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("variable_names", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CqlPreparedResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CqlPreparedResultTupleSchemeFactory();

  public int itemId; // required
  public int count; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> variable_types; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> variable_names; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ITEM_ID((short)1, "itemId"),
    COUNT((short)2, "count"),
    VARIABLE_TYPES((short)3, "variable_types"),
    VARIABLE_NAMES((short)4, "variable_names");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ITEM_ID
          return ITEM_ID;
        case 2: // COUNT
          return COUNT;
        case 3: // VARIABLE_TYPES
          return VARIABLE_TYPES;
        case 4: // VARIABLE_NAMES
          return VARIABLE_NAMES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ITEMID_ISSET_ID = 0;
  private static final int __COUNT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.VARIABLE_TYPES,_Fields.VARIABLE_NAMES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VARIABLE_TYPES, new org.apache.thrift.meta_data.FieldMetaData("variable_types", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.VARIABLE_NAMES, new org.apache.thrift.meta_data.FieldMetaData("variable_names", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CqlPreparedResult.class, metaDataMap);
  }

  public CqlPreparedResult() {
  }

  public CqlPreparedResult(
    int itemId,
    int count)
  {
    this();
    this.itemId = itemId;
    setItemIdIsSet(true);
    this.count = count;
    setCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CqlPreparedResult(CqlPreparedResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.itemId = other.itemId;
    this.count = other.count;
    if (other.isSetVariable_types()) {
      java.util.List<java.lang.String> __this__variable_types = new java.util.ArrayList<java.lang.String>(other.variable_types);
      this.variable_types = __this__variable_types;
    }
    if (other.isSetVariable_names()) {
      java.util.List<java.lang.String> __this__variable_names = new java.util.ArrayList<java.lang.String>(other.variable_names);
      this.variable_names = __this__variable_names;
    }
  }

  public CqlPreparedResult deepCopy() {
    return new CqlPreparedResult(this);
  }

  @Override
  public void clear() {
    setItemIdIsSet(false);
    this.itemId = 0;
    setCountIsSet(false);
    this.count = 0;
    this.variable_types = null;
    this.variable_names = null;
  }

  public int getItemId() {
    return this.itemId;
  }

  public CqlPreparedResult setItemId(int itemId) {
    this.itemId = itemId;
    setItemIdIsSet(true);
    return this;
  }

  public void unsetItemId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
  public boolean isSetItemId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ITEMID_ISSET_ID);
  }

  public void setItemIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ITEMID_ISSET_ID, value);
  }

  public int getCount() {
    return this.count;
  }

  public CqlPreparedResult setCount(int count) {
    this.count = count;
    setCountIsSet(true);
    return this;
  }

  public void unsetCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  /** Returns true if field count is set (has been assigned a value) and false otherwise */
  public boolean isSetCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
  }

  public void setCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
  }

  public int getVariable_typesSize() {
    return (this.variable_types == null) ? 0 : this.variable_types.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getVariable_typesIterator() {
    return (this.variable_types == null) ? null : this.variable_types.iterator();
  }

  public void addToVariable_types(java.lang.String elem) {
    if (this.variable_types == null) {
      this.variable_types = new java.util.ArrayList<java.lang.String>();
    }
    this.variable_types.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getVariable_types() {
    return this.variable_types;
  }

  public CqlPreparedResult setVariable_types(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> variable_types) {
    this.variable_types = variable_types;
    return this;
  }

  public void unsetVariable_types() {
    this.variable_types = null;
  }

  /** Returns true if field variable_types is set (has been assigned a value) and false otherwise */
  public boolean isSetVariable_types() {
    return this.variable_types != null;
  }

  public void setVariable_typesIsSet(boolean value) {
    if (!value) {
      this.variable_types = null;
    }
  }

  public int getVariable_namesSize() {
    return (this.variable_names == null) ? 0 : this.variable_names.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getVariable_namesIterator() {
    return (this.variable_names == null) ? null : this.variable_names.iterator();
  }

  public void addToVariable_names(java.lang.String elem) {
    if (this.variable_names == null) {
      this.variable_names = new java.util.ArrayList<java.lang.String>();
    }
    this.variable_names.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getVariable_names() {
    return this.variable_names;
  }

  public CqlPreparedResult setVariable_names(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> variable_names) {
    this.variable_names = variable_names;
    return this;
  }

  public void unsetVariable_names() {
    this.variable_names = null;
  }

  /** Returns true if field variable_names is set (has been assigned a value) and false otherwise */
  public boolean isSetVariable_names() {
    return this.variable_names != null;
  }

  public void setVariable_namesIsSet(boolean value) {
    if (!value) {
      this.variable_names = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ITEM_ID:
      if (value == null) {
        unsetItemId();
      } else {
        setItemId((java.lang.Integer)value);
      }
      break;

    case COUNT:
      if (value == null) {
        unsetCount();
      } else {
        setCount((java.lang.Integer)value);
      }
      break;

    case VARIABLE_TYPES:
      if (value == null) {
        unsetVariable_types();
      } else {
        setVariable_types((java.util.List<java.lang.String>)value);
      }
      break;

    case VARIABLE_NAMES:
      if (value == null) {
        unsetVariable_names();
      } else {
        setVariable_names((java.util.List<java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ITEM_ID:
      return getItemId();

    case COUNT:
      return getCount();

    case VARIABLE_TYPES:
      return getVariable_types();

    case VARIABLE_NAMES:
      return getVariable_names();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ITEM_ID:
      return isSetItemId();
    case COUNT:
      return isSetCount();
    case VARIABLE_TYPES:
      return isSetVariable_types();
    case VARIABLE_NAMES:
      return isSetVariable_names();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof CqlPreparedResult)
      return this.equals((CqlPreparedResult)that);
    return false;
  }

  public boolean equals(CqlPreparedResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_itemId = true;
    boolean that_present_itemId = true;
    if (this_present_itemId || that_present_itemId) {
      if (!(this_present_itemId && that_present_itemId))
        return false;
      if (this.itemId != that.itemId)
        return false;
    }

    boolean this_present_count = true;
    boolean that_present_count = true;
    if (this_present_count || that_present_count) {
      if (!(this_present_count && that_present_count))
        return false;
      if (this.count != that.count)
        return false;
    }

    boolean this_present_variable_types = true && this.isSetVariable_types();
    boolean that_present_variable_types = true && that.isSetVariable_types();
    if (this_present_variable_types || that_present_variable_types) {
      if (!(this_present_variable_types && that_present_variable_types))
        return false;
      if (!this.variable_types.equals(that.variable_types))
        return false;
    }

    boolean this_present_variable_names = true && this.isSetVariable_names();
    boolean that_present_variable_names = true && that.isSetVariable_names();
    if (this_present_variable_names || that_present_variable_names) {
      if (!(this_present_variable_names && that_present_variable_names))
        return false;
      if (!this.variable_names.equals(that.variable_names))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + itemId;

    hashCode = hashCode * 8191 + count;

    hashCode = hashCode * 8191 + ((isSetVariable_types()) ? 131071 : 524287);
    if (isSetVariable_types())
      hashCode = hashCode * 8191 + variable_types.hashCode();

    hashCode = hashCode * 8191 + ((isSetVariable_names()) ? 131071 : 524287);
    if (isSetVariable_names())
      hashCode = hashCode * 8191 + variable_names.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(CqlPreparedResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetItemId(), other.isSetItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, other.itemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCount(), other.isSetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVariable_types(), other.isSetVariable_types());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVariable_types()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variable_types, other.variable_types);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVariable_names(), other.isSetVariable_names());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVariable_names()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variable_names, other.variable_names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CqlPreparedResult(");
    boolean first = true;

    sb.append("itemId:");
    sb.append(this.itemId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("count:");
    sb.append(this.count);
    first = false;
    if (isSetVariable_types()) {
      if (!first) sb.append(", ");
      sb.append("variable_types:");
      if (this.variable_types == null) {
        sb.append("null");
      } else {
        sb.append(this.variable_types);
      }
      first = false;
    }
    if (isSetVariable_names()) {
      if (!first) sb.append(", ");
      sb.append("variable_names:");
      if (this.variable_names == null) {
        sb.append("null");
      } else {
        sb.append(this.variable_names);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'itemId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'count' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CqlPreparedResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CqlPreparedResultStandardScheme getScheme() {
      return new CqlPreparedResultStandardScheme();
    }
  }

  private static class CqlPreparedResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<CqlPreparedResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CqlPreparedResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.itemId = iprot.readI32();
              struct.setItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.count = iprot.readI32();
              struct.setCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VARIABLE_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list200 = iprot.readListBegin();
                struct.variable_types = new java.util.ArrayList<java.lang.String>(_list200.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem201;
                for (int _i202 = 0; _i202 < _list200.size; ++_i202)
                {
                  _elem201 = iprot.readString();
                  struct.variable_types.add(_elem201);
                }
                iprot.readListEnd();
              }
              struct.setVariable_typesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VARIABLE_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list203 = iprot.readListBegin();
                struct.variable_names = new java.util.ArrayList<java.lang.String>(_list203.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem204;
                for (int _i205 = 0; _i205 < _list203.size; ++_i205)
                {
                  _elem204 = iprot.readString();
                  struct.variable_names.add(_elem204);
                }
                iprot.readListEnd();
              }
              struct.setVariable_namesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetItemId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'itemId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CqlPreparedResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
      oprot.writeI32(struct.itemId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI32(struct.count);
      oprot.writeFieldEnd();
      if (struct.variable_types != null) {
        if (struct.isSetVariable_types()) {
          oprot.writeFieldBegin(VARIABLE_TYPES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.variable_types.size()));
            for (java.lang.String _iter206 : struct.variable_types)
            {
              oprot.writeString(_iter206);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.variable_names != null) {
        if (struct.isSetVariable_names()) {
          oprot.writeFieldBegin(VARIABLE_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.variable_names.size()));
            for (java.lang.String _iter207 : struct.variable_names)
            {
              oprot.writeString(_iter207);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CqlPreparedResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CqlPreparedResultTupleScheme getScheme() {
      return new CqlPreparedResultTupleScheme();
    }
  }

  private static class CqlPreparedResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<CqlPreparedResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CqlPreparedResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI32(struct.itemId);
      oprot.writeI32(struct.count);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetVariable_types()) {
        optionals.set(0);
      }
      if (struct.isSetVariable_names()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetVariable_types()) {
        {
          oprot.writeI32(struct.variable_types.size());
          for (java.lang.String _iter208 : struct.variable_types)
          {
            oprot.writeString(_iter208);
          }
        }
      }
      if (struct.isSetVariable_names()) {
        {
          oprot.writeI32(struct.variable_names.size());
          for (java.lang.String _iter209 : struct.variable_names)
          {
            oprot.writeString(_iter209);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CqlPreparedResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.itemId = iprot.readI32();
      struct.setItemIdIsSet(true);
      struct.count = iprot.readI32();
      struct.setCountIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list210 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.variable_types = new java.util.ArrayList<java.lang.String>(_list210.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem211;
          for (int _i212 = 0; _i212 < _list210.size; ++_i212)
          {
            _elem211 = iprot.readString();
            struct.variable_types.add(_elem211);
          }
        }
        struct.setVariable_typesIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list213 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.variable_names = new java.util.ArrayList<java.lang.String>(_list213.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem214;
          for (int _i215 = 0; _i215 < _list213.size; ++_i215)
          {
            _elem214 = iprot.readString();
            struct.variable_names.add(_elem214);
          }
        }
        struct.setVariable_namesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

